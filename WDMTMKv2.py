# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_WDMTMKv2')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_WDMTMKv2')
    _WDMTMKv2 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_WDMTMKv2', [dirname(__file__)])
        except ImportError:
            import _WDMTMKv2
            return _WDMTMKv2
        if fp is not None:
            try:
                _mod = imp.load_module('_WDMTMKv2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _WDMTMKv2 = swig_import_helper()
    del swig_import_helper
else:
    import _WDMTMKv2
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class WordBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordBuffer, name)
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        this = _WDMTMKv2.new_WordBuffer(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_WordBuffer
    __del__ = lambda self: None

    def __getitem__(self, index: 'size_t') -> "unsigned short":
        return _WDMTMKv2.WordBuffer___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'unsigned short') -> "void":
        return _WDMTMKv2.WordBuffer___setitem__(self, index, value)

    def cast(self) -> "unsigned short *":
        return _WDMTMKv2.WordBuffer_cast(self)
    if _newclass:
        frompointer = staticmethod(_WDMTMKv2.WordBuffer_frompointer)
    else:
        frompointer = _WDMTMKv2.WordBuffer_frompointer
WordBuffer_swigregister = _WDMTMKv2.WordBuffer_swigregister
WordBuffer_swigregister(WordBuffer)

def WordBuffer_frompointer(t: 'unsigned short *') -> "WordBuffer *":
    return _WDMTMKv2.WordBuffer_frompointer(t)
WordBuffer_frompointer = _WDMTMKv2.WordBuffer_frompointer

TMK_VERSION_MIN = _WDMTMKv2.TMK_VERSION_MIN
TMK_VERSION = _WDMTMKv2.TMK_VERSION
EZUSB_MAJOR_VERSION_MIN = _WDMTMKv2.EZUSB_MAJOR_VERSION_MIN
EZUSB_MINOR_VERSION_MIN = _WDMTMKv2.EZUSB_MINOR_VERSION_MIN
MAX_TMK_NUMBER = _WDMTMKv2.MAX_TMK_NUMBER
MAX_USBTA_NUM = _WDMTMKv2.MAX_USBTA_NUM
TMK_INT_TIMER = _WDMTMKv2.TMK_INT_TIMER
TMK_INT_BUSJAM = _WDMTMKv2.TMK_INT_BUSJAM
TMK_INT_FIFO_OVF = _WDMTMKv2.TMK_INT_FIFO_OVF
MIN_TMK_TYPE = _WDMTMKv2.MIN_TMK_TYPE
MAX_TMK_TYPE = _WDMTMKv2.MAX_TMK_TYPE
TMK400 = _WDMTMKv2.TMK400
TMKMPC = _WDMTMKv2.TMKMPC
RTMK400 = _WDMTMKv2.RTMK400
TMKX = _WDMTMKv2.TMKX
TMKXI = _WDMTMKv2.TMKXI
MRTX = _WDMTMKv2.MRTX
MRTXI = _WDMTMKv2.MRTXI
TA = _WDMTMKv2.TA
TAI = _WDMTMKv2.TAI
MRTA = _WDMTMKv2.MRTA
MRTAI = _WDMTMKv2.MRTAI
ALL_TMKS = _WDMTMKv2.ALL_TMKS
MBC_ALLOC_FAIL = _WDMTMKv2.MBC_ALLOC_FAIL
GET_TIMEOUT = _WDMTMKv2.GET_TIMEOUT
SWTIMER_OFF = _WDMTMKv2.SWTIMER_OFF
SWTIMER_ON = _WDMTMKv2.SWTIMER_ON
SWTIMER_EVENT = _WDMTMKv2.SWTIMER_EVENT
SWTIMER_RESET = _WDMTMKv2.SWTIMER_RESET
GET_SWTIMER_CTRL = _WDMTMKv2.GET_SWTIMER_CTRL
TIMER_RESET = _WDMTMKv2.TIMER_RESET
TIMER_OFF = _WDMTMKv2.TIMER_OFF
TIMER_16BIT = _WDMTMKv2.TIMER_16BIT
TIMER_32BIT = _WDMTMKv2.TIMER_32BIT
TIMER_1US = _WDMTMKv2.TIMER_1US
TIMER_2US = _WDMTMKv2.TIMER_2US
TIMER_4US = _WDMTMKv2.TIMER_4US
TIMER_8US = _WDMTMKv2.TIMER_8US
TIMER_16US = _WDMTMKv2.TIMER_16US
TIMER_32US = _WDMTMKv2.TIMER_32US
TIMER_64US = _WDMTMKv2.TIMER_64US
TIMER_STOP = _WDMTMKv2.TIMER_STOP
TIMER_SYN = _WDMTMKv2.TIMER_SYN
TIMER_SYND = _WDMTMKv2.TIMER_SYND
TIMER_SA = _WDMTMKv2.TIMER_SA
TIMER_NOSTOP = _WDMTMKv2.TIMER_NOSTOP
TIMER_MASK = _WDMTMKv2.TIMER_MASK
TIMER_STEP = _WDMTMKv2.TIMER_STEP
TIMER_BITS = _WDMTMKv2.TIMER_BITS
GET_TIMER_CTRL = _WDMTMKv2.GET_TIMER_CTRL
DATA_BC_RT = _WDMTMKv2.DATA_BC_RT
DATA_BC_RT_BRCST = _WDMTMKv2.DATA_BC_RT_BRCST
DATA_RT_BC = _WDMTMKv2.DATA_RT_BC
DATA_RT_RT = _WDMTMKv2.DATA_RT_RT
DATA_RT_RT_BRCST = _WDMTMKv2.DATA_RT_RT_BRCST
CTRL_C_A = _WDMTMKv2.CTRL_C_A
CTRL_C_BRCST = _WDMTMKv2.CTRL_C_BRCST
CTRL_CD_A = _WDMTMKv2.CTRL_CD_A
CTRL_CD_BRCST = _WDMTMKv2.CTRL_CD_BRCST
CTRL_C_AD = _WDMTMKv2.CTRL_C_AD
CC_FMT_1 = _WDMTMKv2.CC_FMT_1
CC_FMT_2 = _WDMTMKv2.CC_FMT_2
CC_FMT_3 = _WDMTMKv2.CC_FMT_3
CC_FMT_4 = _WDMTMKv2.CC_FMT_4
CC_FMT_5 = _WDMTMKv2.CC_FMT_5
CC_FMT_6 = _WDMTMKv2.CC_FMT_6
CC_FMT_7 = _WDMTMKv2.CC_FMT_7
CC_FMT_8 = _WDMTMKv2.CC_FMT_8
CC_FMT_9 = _WDMTMKv2.CC_FMT_9
CC_FMT_10 = _WDMTMKv2.CC_FMT_10
BUS_A = _WDMTMKv2.BUS_A
BUS_B = _WDMTMKv2.BUS_B
BUS_1 = _WDMTMKv2.BUS_1
BUS_2 = _WDMTMKv2.BUS_2
S_ERAO_MASK = _WDMTMKv2.S_ERAO_MASK
S_MEO_MASK = _WDMTMKv2.S_MEO_MASK
S_IB_MASK = _WDMTMKv2.S_IB_MASK
S_TO_MASK = _WDMTMKv2.S_TO_MASK
S_EM_MASK = _WDMTMKv2.S_EM_MASK
S_EBC_MASK = _WDMTMKv2.S_EBC_MASK
S_DI_MASK = _WDMTMKv2.S_DI_MASK
S_ELN_MASK = _WDMTMKv2.S_ELN_MASK
S_G1_MASK = _WDMTMKv2.S_G1_MASK
S_G2_MASK = _WDMTMKv2.S_G2_MASK
NWORDS_MASK = _WDMTMKv2.NWORDS_MASK
CMD_MASK = _WDMTMKv2.CMD_MASK
SUBADDR_MASK = _WDMTMKv2.SUBADDR_MASK
CI_MASK = _WDMTMKv2.CI_MASK
HBIT_MASK = _WDMTMKv2.HBIT_MASK
RT_DIR_MASK = _WDMTMKv2.RT_DIR_MASK
ADDRESS_MASK = _WDMTMKv2.ADDRESS_MASK
RTFL_MASK = _WDMTMKv2.RTFL_MASK
DNBA_MASK = _WDMTMKv2.DNBA_MASK
SSFL_MASK = _WDMTMKv2.SSFL_MASK
BUSY_MASK = _WDMTMKv2.BUSY_MASK
BRCST_MASK = _WDMTMKv2.BRCST_MASK
NULL_MASK = _WDMTMKv2.NULL_MASK
SREQ_MASK = _WDMTMKv2.SREQ_MASK
ERROR_MASK = _WDMTMKv2.ERROR_MASK
SREQ = _WDMTMKv2.SREQ
BUSY = _WDMTMKv2.BUSY
SSFL = _WDMTMKv2.SSFL
RTFL = _WDMTMKv2.RTFL
DNBA = _WDMTMKv2.DNBA
CWB0 = _WDMTMKv2.CWB0
CWB1 = _WDMTMKv2.CWB1
BC_MODE = _WDMTMKv2.BC_MODE
RT_MODE = _WDMTMKv2.RT_MODE
MT_MODE = _WDMTMKv2.MT_MODE
MRT_MODE = _WDMTMKv2.MRT_MODE
UNDEFINED_MODE = _WDMTMKv2.UNDEFINED_MODE
RT_TRANSMIT = _WDMTMKv2.RT_TRANSMIT
RT_RECEIVE = _WDMTMKv2.RT_RECEIVE
RT_ERROR_MASK = _WDMTMKv2.RT_ERROR_MASK
RT_FLAG = _WDMTMKv2.RT_FLAG
RT_FLAG_MASK = _WDMTMKv2.RT_FLAG_MASK
RT_HBIT_MODE = _WDMTMKv2.RT_HBIT_MODE
RT_FLAG_MODE = _WDMTMKv2.RT_FLAG_MODE
RT_BRCST_MODE = _WDMTMKv2.RT_BRCST_MODE
RT_DATA_BL = _WDMTMKv2.RT_DATA_BL
RT_GENER1_BL = _WDMTMKv2.RT_GENER1_BL
RT_GENER2_BL = _WDMTMKv2.RT_GENER2_BL
BC_GENER1_BL = _WDMTMKv2.BC_GENER1_BL
BC_GENER2_BL = _WDMTMKv2.BC_GENER2_BL
MT_GENER1_BL = _WDMTMKv2.MT_GENER1_BL
MT_GENER2_BL = _WDMTMKv2.MT_GENER2_BL
TMK_IRQ_OFF = _WDMTMKv2.TMK_IRQ_OFF
CX_CC_MASK = _WDMTMKv2.CX_CC_MASK
CX_CONT_MASK = _WDMTMKv2.CX_CONT_MASK
CX_BUS_MASK = _WDMTMKv2.CX_BUS_MASK
CX_SIG_MASK = _WDMTMKv2.CX_SIG_MASK
CX_INT_MASK = _WDMTMKv2.CX_INT_MASK
CX_CONT = _WDMTMKv2.CX_CONT
CX_STOP = _WDMTMKv2.CX_STOP
CX_BUS_0 = _WDMTMKv2.CX_BUS_0
CX_BUS_A = _WDMTMKv2.CX_BUS_A
CX_BUS_1 = _WDMTMKv2.CX_BUS_1
CX_BUS_B = _WDMTMKv2.CX_BUS_B
CX_NOSIG = _WDMTMKv2.CX_NOSIG
CX_SIG = _WDMTMKv2.CX_SIG
CX_INT = _WDMTMKv2.CX_INT
CX_NOINT = _WDMTMKv2.CX_NOINT
SX_NOERR = _WDMTMKv2.SX_NOERR
SX_MEO = _WDMTMKv2.SX_MEO
SX_TOA = _WDMTMKv2.SX_TOA
SX_TOD = _WDMTMKv2.SX_TOD
SX_ELN = _WDMTMKv2.SX_ELN
SX_ERAO = _WDMTMKv2.SX_ERAO
SX_ESYN = _WDMTMKv2.SX_ESYN
SX_EBC = _WDMTMKv2.SX_EBC
SX_ERR_MASK = _WDMTMKv2.SX_ERR_MASK
SX_IB_MASK = _WDMTMKv2.SX_IB_MASK
SX_G1_MASK = _WDMTMKv2.SX_G1_MASK
SX_G2_MASK = _WDMTMKv2.SX_G2_MASK
SX_K2_MASK = _WDMTMKv2.SX_K2_MASK
SX_K1_MASK = _WDMTMKv2.SX_K1_MASK
SX_SCC_MASK = _WDMTMKv2.SX_SCC_MASK
SX_ME_MASK = _WDMTMKv2.SX_ME_MASK
SX_BUS_MASK = _WDMTMKv2.SX_BUS_MASK
SX_BUS_0 = _WDMTMKv2.SX_BUS_0
SX_BUS_A = _WDMTMKv2.SX_BUS_A
SX_BUS_1 = _WDMTMKv2.SX_BUS_1
SX_BUS_B = _WDMTMKv2.SX_BUS_B
GET_IO_DELAY = _WDMTMKv2.GET_IO_DELAY
RT_ENABLE = _WDMTMKv2.RT_ENABLE
RT_DISABLE = _WDMTMKv2.RT_DISABLE
RT_GET_ENABLE = _WDMTMKv2.RT_GET_ENABLE
CMD_DYNAMIC_BUS_CONTROL = _WDMTMKv2.CMD_DYNAMIC_BUS_CONTROL
CMD_SYNCHRONIZE = _WDMTMKv2.CMD_SYNCHRONIZE
CMD_TRANSMIT_STATUS_WORD = _WDMTMKv2.CMD_TRANSMIT_STATUS_WORD
CMD_INITIATE_SELF_TEST = _WDMTMKv2.CMD_INITIATE_SELF_TEST
CMD_TRANSMITTER_SHUTDOWN = _WDMTMKv2.CMD_TRANSMITTER_SHUTDOWN
CMD_OVERRIDE_TRANSMITTER_SHUTDOWN = _WDMTMKv2.CMD_OVERRIDE_TRANSMITTER_SHUTDOWN
CMD_INHIBIT_TERMINAL_FLAG_BIT = _WDMTMKv2.CMD_INHIBIT_TERMINAL_FLAG_BIT
CMD_OVERRIDE_INHIBIT_TERMINAL_FLAG_BIT = _WDMTMKv2.CMD_OVERRIDE_INHIBIT_TERMINAL_FLAG_BIT
CMD_RESET_REMOTE_TERMINAL = _WDMTMKv2.CMD_RESET_REMOTE_TERMINAL
CMD_TRANSMIT_VECTOR_WORD = _WDMTMKv2.CMD_TRANSMIT_VECTOR_WORD
CMD_SYNCHRONIZE_WITH_DATA_WORD = _WDMTMKv2.CMD_SYNCHRONIZE_WITH_DATA_WORD
CMD_TRANSMIT_LAST_COMMAND_WORD = _WDMTMKv2.CMD_TRANSMIT_LAST_COMMAND_WORD
CMD_TRANSMIT_BUILT_IN_TEST_WORD = _WDMTMKv2.CMD_TRANSMIT_BUILT_IN_TEST_WORD
TMK_ERROR_0 = _WDMTMKv2.TMK_ERROR_0
TMK_BAD_TYPE = _WDMTMKv2.TMK_BAD_TYPE
TMK_BAD_IRQ = _WDMTMKv2.TMK_BAD_IRQ
TMK_BAD_NUMBER = _WDMTMKv2.TMK_BAD_NUMBER
BC_BAD_BUS = _WDMTMKv2.BC_BAD_BUS
BC_BAD_BASE = _WDMTMKv2.BC_BAD_BASE
BC_BAD_LEN = _WDMTMKv2.BC_BAD_LEN
RT_BAD_PAGE = _WDMTMKv2.RT_BAD_PAGE
RT_BAD_LEN = _WDMTMKv2.RT_BAD_LEN
RT_BAD_ADDRESS = _WDMTMKv2.RT_BAD_ADDRESS
RT_BAD_FUNC = _WDMTMKv2.RT_BAD_FUNC
BC_BAD_FUNC = _WDMTMKv2.BC_BAD_FUNC
TMK_BAD_FUNC = _WDMTMKv2.TMK_BAD_FUNC
VTMK_BAD_VERSION = _WDMTMKv2.VTMK_BAD_VERSION
VTMK_tmkconfig = _WDMTMKv2.VTMK_tmkconfig
VTMK_tmkdone = _WDMTMKv2.VTMK_tmkdone
VTMK_tmkgetmaxn = _WDMTMKv2.VTMK_tmkgetmaxn
VTMK_tmkselect = _WDMTMKv2.VTMK_tmkselect
VTMK_tmkselected = _WDMTMKv2.VTMK_tmkselected
VTMK_tmkgetmode = _WDMTMKv2.VTMK_tmkgetmode
VTMK_tmksetcwbits = _WDMTMKv2.VTMK_tmksetcwbits
VTMK_tmkclrcwbits = _WDMTMKv2.VTMK_tmkclrcwbits
VTMK_tmkgetcwbits = _WDMTMKv2.VTMK_tmkgetcwbits
VTMK_tmkdefevent = _WDMTMKv2.VTMK_tmkdefevent
VTMK_tmkgetevd = _WDMTMKv2.VTMK_tmkgetevd
VTMK_bcreset = _WDMTMKv2.VTMK_bcreset
VTMK_bc_def_tldw = _WDMTMKv2.VTMK_bc_def_tldw
VTMK_bc_enable_di = _WDMTMKv2.VTMK_bc_enable_di
VTMK_bc_disable_di = _WDMTMKv2.VTMK_bc_disable_di
VTMK_bcdefirqmode = _WDMTMKv2.VTMK_bcdefirqmode
VTMK_bcgetirqmode = _WDMTMKv2.VTMK_bcgetirqmode
VTMK_bcgetmaxbase = _WDMTMKv2.VTMK_bcgetmaxbase
VTMK_bcdefbase = _WDMTMKv2.VTMK_bcdefbase
VTMK_bcgetbase = _WDMTMKv2.VTMK_bcgetbase
VTMK_bcputw = _WDMTMKv2.VTMK_bcputw
VTMK_bcgetw = _WDMTMKv2.VTMK_bcgetw
VTMK_bcgetansw = _WDMTMKv2.VTMK_bcgetansw
VTMK_bcputblk = _WDMTMKv2.VTMK_bcputblk
VTMK_bcgetblk = _WDMTMKv2.VTMK_bcgetblk
VTMK_bcdefbus = _WDMTMKv2.VTMK_bcdefbus
VTMK_bcgetbus = _WDMTMKv2.VTMK_bcgetbus
VTMK_bcstart = _WDMTMKv2.VTMK_bcstart
VTMK_bcstartx = _WDMTMKv2.VTMK_bcstartx
VTMK_bcdeflink = _WDMTMKv2.VTMK_bcdeflink
VTMK_bcgetlink = _WDMTMKv2.VTMK_bcgetlink
VTMK_bcstop = _WDMTMKv2.VTMK_bcstop
VTMK_bcgetstate = _WDMTMKv2.VTMK_bcgetstate
VTMK_rtreset = _WDMTMKv2.VTMK_rtreset
VTMK_rtdefirqmode = _WDMTMKv2.VTMK_rtdefirqmode
VTMK_rtgetirqmode = _WDMTMKv2.VTMK_rtgetirqmode
VTMK_rtdefmode = _WDMTMKv2.VTMK_rtdefmode
VTMK_rtgetmode = _WDMTMKv2.VTMK_rtgetmode
VTMK_rtgetmaxpage = _WDMTMKv2.VTMK_rtgetmaxpage
VTMK_rtdefpage = _WDMTMKv2.VTMK_rtdefpage
VTMK_rtgetpage = _WDMTMKv2.VTMK_rtgetpage
VTMK_rtdefpagepc = _WDMTMKv2.VTMK_rtdefpagepc
VTMK_rtdefpagebus = _WDMTMKv2.VTMK_rtdefpagebus
VTMK_rtgetpagepc = _WDMTMKv2.VTMK_rtgetpagepc
VTMK_rtgetpagebus = _WDMTMKv2.VTMK_rtgetpagebus
VTMK_rtdefaddress = _WDMTMKv2.VTMK_rtdefaddress
VTMK_rtgetaddress = _WDMTMKv2.VTMK_rtgetaddress
VTMK_rtdefsubaddr = _WDMTMKv2.VTMK_rtdefsubaddr
VTMK_rtgetsubaddr = _WDMTMKv2.VTMK_rtgetsubaddr
VTMK_rtputw = _WDMTMKv2.VTMK_rtputw
VTMK_rtgetw = _WDMTMKv2.VTMK_rtgetw
VTMK_rtputblk = _WDMTMKv2.VTMK_rtputblk
VTMK_rtgetblk = _WDMTMKv2.VTMK_rtgetblk
VTMK_rtsetanswbits = _WDMTMKv2.VTMK_rtsetanswbits
VTMK_rtclranswbits = _WDMTMKv2.VTMK_rtclranswbits
VTMK_rtgetanswbits = _WDMTMKv2.VTMK_rtgetanswbits
VTMK_rtgetflags = _WDMTMKv2.VTMK_rtgetflags
VTMK_rtputflags = _WDMTMKv2.VTMK_rtputflags
VTMK_rtsetflag = _WDMTMKv2.VTMK_rtsetflag
VTMK_rtclrflag = _WDMTMKv2.VTMK_rtclrflag
VTMK_rtgetflag = _WDMTMKv2.VTMK_rtgetflag
VTMK_rtgetstate = _WDMTMKv2.VTMK_rtgetstate
VTMK_rtbusy = _WDMTMKv2.VTMK_rtbusy
VTMK_rtlock = _WDMTMKv2.VTMK_rtlock
VTMK_rtunlock = _WDMTMKv2.VTMK_rtunlock
VTMK_rtgetcmddata = _WDMTMKv2.VTMK_rtgetcmddata
VTMK_rtputcmddata = _WDMTMKv2.VTMK_rtputcmddata
VTMK_mtreset = _WDMTMKv2.VTMK_mtreset
VTMK_mtdefirqmode = _WDMTMKv2.VTMK_mtdefirqmode
VTMK_mtgetirqmode = _WDMTMKv2.VTMK_mtgetirqmode
VTMK_mtgetmaxbase = _WDMTMKv2.VTMK_mtgetmaxbase
VTMK_mtdefbase = _WDMTMKv2.VTMK_mtdefbase
VTMK_mtgetbase = _WDMTMKv2.VTMK_mtgetbase
VTMK_mtputw = _WDMTMKv2.VTMK_mtputw
VTMK_mtgetw = _WDMTMKv2.VTMK_mtgetw
VTMK_mtgetsw = _WDMTMKv2.VTMK_mtgetsw
VTMK_mtputblk = _WDMTMKv2.VTMK_mtputblk
VTMK_mtgetblk = _WDMTMKv2.VTMK_mtgetblk
VTMK_mtstartx = _WDMTMKv2.VTMK_mtstartx
VTMK_mtdeflink = _WDMTMKv2.VTMK_mtdeflink
VTMK_mtgetlink = _WDMTMKv2.VTMK_mtgetlink
VTMK_mtstop = _WDMTMKv2.VTMK_mtstop
VTMK_mtgetstate = _WDMTMKv2.VTMK_mtgetstate
VTMK_tmkgetinfo = _WDMTMKv2.VTMK_tmkgetinfo
VTMK_GetVersion = _WDMTMKv2.VTMK_GetVersion
VTMK_rtenable = _WDMTMKv2.VTMK_rtenable
VTMK_mrtgetmaxn = _WDMTMKv2.VTMK_mrtgetmaxn
VTMK_mrtconfig = _WDMTMKv2.VTMK_mrtconfig
VTMK_mrtselected = _WDMTMKv2.VTMK_mrtselected
VTMK_mrtgetstate = _WDMTMKv2.VTMK_mrtgetstate
VTMK_mrtdefbrcsubaddr0 = _WDMTMKv2.VTMK_mrtdefbrcsubaddr0
VTMK_mrtreset = _WDMTMKv2.VTMK_mrtreset
VTMK_tmktimer = _WDMTMKv2.VTMK_tmktimer
VTMK_tmkgettimer = _WDMTMKv2.VTMK_tmkgettimer
VTMK_tmkgettimerl = _WDMTMKv2.VTMK_tmkgettimerl
VTMK_bcgetmsgtime = _WDMTMKv2.VTMK_bcgetmsgtime
VTMK_mtgetmsgtime = _WDMTMKv2.VTMK_mtgetmsgtime
VTMK_rtgetmsgtime = _WDMTMKv2.VTMK_rtgetmsgtime
VTMK_tmkgethwver = _WDMTMKv2.VTMK_tmkgethwver
VTMK_tmkgetevtime = _WDMTMKv2.VTMK_tmkgetevtime
VTMK_tmkswtimer = _WDMTMKv2.VTMK_tmkswtimer
VTMK_tmkgetswtimer = _WDMTMKv2.VTMK_tmkgetswtimer
VTMK_tmktimeout = _WDMTMKv2.VTMK_tmktimeout
VTMK_mrtdefbrcpage = _WDMTMKv2.VTMK_mrtdefbrcpage
VTMK_mrtgetbrcpage = _WDMTMKv2.VTMK_mrtgetbrcpage
VTMK_mbcinit = _WDMTMKv2.VTMK_mbcinit
VTMK_mbcpreparex = _WDMTMKv2.VTMK_mbcpreparex
VTMK_mbcstartx = _WDMTMKv2.VTMK_mbcstartx
VTMK_mbcalloc = _WDMTMKv2.VTMK_mbcalloc
VTMK_mbcfree = _WDMTMKv2.VTMK_mbcfree
METHOD_BUFFERED = _WDMTMKv2.METHOD_BUFFERED
METHOD_IN_DIRECT = _WDMTMKv2.METHOD_IN_DIRECT
METHOD_OUT_DIRECT = _WDMTMKv2.METHOD_OUT_DIRECT
METHOD_NEITHER = _WDMTMKv2.METHOD_NEITHER
FILE_ANY_ACCESS = _WDMTMKv2.FILE_ANY_ACCESS
FILE_READ_ACCESS = _WDMTMKv2.FILE_READ_ACCESS
FILE_WRITE_ACCESS = _WDMTMKv2.FILE_WRITE_ACCESS
TMK_KRNLDRVR = _WDMTMKv2.TMK_KRNLDRVR
IOCTL_TMK_tmkconfig = _WDMTMKv2.IOCTL_TMK_tmkconfig
IOCTL_TMK_tmkdone = _WDMTMKv2.IOCTL_TMK_tmkdone
IOCTL_TMK_tmkgetmaxn = _WDMTMKv2.IOCTL_TMK_tmkgetmaxn
IOCTL_TMK_tmkselect = _WDMTMKv2.IOCTL_TMK_tmkselect
IOCTL_TMK_tmkselected = _WDMTMKv2.IOCTL_TMK_tmkselected
IOCTL_TMK_tmkgetmode = _WDMTMKv2.IOCTL_TMK_tmkgetmode
IOCTL_TMK_tmksetcwbits = _WDMTMKv2.IOCTL_TMK_tmksetcwbits
IOCTL_TMK_tmkclrcwbits = _WDMTMKv2.IOCTL_TMK_tmkclrcwbits
IOCTL_TMK_tmkgetcwbits = _WDMTMKv2.IOCTL_TMK_tmkgetcwbits
IOCTL_TMK_tmkdefevent = _WDMTMKv2.IOCTL_TMK_tmkdefevent
IOCTL_TMK_tmkgetevd = _WDMTMKv2.IOCTL_TMK_tmkgetevd
IOCTL_TMK_bcreset = _WDMTMKv2.IOCTL_TMK_bcreset
IOCTL_TMK_bc_def_tldw = _WDMTMKv2.IOCTL_TMK_bc_def_tldw
IOCTL_TMK_bc_enable_di = _WDMTMKv2.IOCTL_TMK_bc_enable_di
IOCTL_TMK_bc_disable_di = _WDMTMKv2.IOCTL_TMK_bc_disable_di
IOCTL_TMK_bcdefirqmode = _WDMTMKv2.IOCTL_TMK_bcdefirqmode
IOCTL_TMK_bcgetirqmode = _WDMTMKv2.IOCTL_TMK_bcgetirqmode
IOCTL_TMK_bcgetmaxbase = _WDMTMKv2.IOCTL_TMK_bcgetmaxbase
IOCTL_TMK_bcdefbase = _WDMTMKv2.IOCTL_TMK_bcdefbase
IOCTL_TMK_bcgetbase = _WDMTMKv2.IOCTL_TMK_bcgetbase
IOCTL_TMK_bcputw = _WDMTMKv2.IOCTL_TMK_bcputw
IOCTL_TMK_bcgetw = _WDMTMKv2.IOCTL_TMK_bcgetw
IOCTL_TMK_bcgetansw = _WDMTMKv2.IOCTL_TMK_bcgetansw
IOCTL_TMK_bcputblk = _WDMTMKv2.IOCTL_TMK_bcputblk
IOCTL_TMK_bcgetblk = _WDMTMKv2.IOCTL_TMK_bcgetblk
IOCTL_TMK_bcdefbus = _WDMTMKv2.IOCTL_TMK_bcdefbus
IOCTL_TMK_bcgetbus = _WDMTMKv2.IOCTL_TMK_bcgetbus
IOCTL_TMK_bcstart = _WDMTMKv2.IOCTL_TMK_bcstart
IOCTL_TMK_bcstartx = _WDMTMKv2.IOCTL_TMK_bcstartx
IOCTL_TMK_bcdeflink = _WDMTMKv2.IOCTL_TMK_bcdeflink
IOCTL_TMK_bcgetlink = _WDMTMKv2.IOCTL_TMK_bcgetlink
IOCTL_TMK_bcstop = _WDMTMKv2.IOCTL_TMK_bcstop
IOCTL_TMK_bcgetstate = _WDMTMKv2.IOCTL_TMK_bcgetstate
IOCTL_TMK_rtreset = _WDMTMKv2.IOCTL_TMK_rtreset
IOCTL_TMK_rtdefirqmode = _WDMTMKv2.IOCTL_TMK_rtdefirqmode
IOCTL_TMK_rtgetirqmode = _WDMTMKv2.IOCTL_TMK_rtgetirqmode
IOCTL_TMK_rtdefmode = _WDMTMKv2.IOCTL_TMK_rtdefmode
IOCTL_TMK_rtgetmode = _WDMTMKv2.IOCTL_TMK_rtgetmode
IOCTL_TMK_rtgetmaxpage = _WDMTMKv2.IOCTL_TMK_rtgetmaxpage
IOCTL_TMK_rtdefpage = _WDMTMKv2.IOCTL_TMK_rtdefpage
IOCTL_TMK_rtgetpage = _WDMTMKv2.IOCTL_TMK_rtgetpage
IOCTL_TMK_rtdefpagepc = _WDMTMKv2.IOCTL_TMK_rtdefpagepc
IOCTL_TMK_rtdefpagebus = _WDMTMKv2.IOCTL_TMK_rtdefpagebus
IOCTL_TMK_rtgetpagepc = _WDMTMKv2.IOCTL_TMK_rtgetpagepc
IOCTL_TMK_rtgetpagebus = _WDMTMKv2.IOCTL_TMK_rtgetpagebus
IOCTL_TMK_rtdefaddress = _WDMTMKv2.IOCTL_TMK_rtdefaddress
IOCTL_TMK_rtgetaddress = _WDMTMKv2.IOCTL_TMK_rtgetaddress
IOCTL_TMK_rtdefsubaddr = _WDMTMKv2.IOCTL_TMK_rtdefsubaddr
IOCTL_TMK_rtgetsubaddr = _WDMTMKv2.IOCTL_TMK_rtgetsubaddr
IOCTL_TMK_rtputw = _WDMTMKv2.IOCTL_TMK_rtputw
IOCTL_TMK_rtgetw = _WDMTMKv2.IOCTL_TMK_rtgetw
IOCTL_TMK_rtputblk = _WDMTMKv2.IOCTL_TMK_rtputblk
IOCTL_TMK_rtgetblk = _WDMTMKv2.IOCTL_TMK_rtgetblk
IOCTL_TMK_rtsetanswbits = _WDMTMKv2.IOCTL_TMK_rtsetanswbits
IOCTL_TMK_rtclranswbits = _WDMTMKv2.IOCTL_TMK_rtclranswbits
IOCTL_TMK_rtgetanswbits = _WDMTMKv2.IOCTL_TMK_rtgetanswbits
IOCTL_TMK_rtgetflags = _WDMTMKv2.IOCTL_TMK_rtgetflags
IOCTL_TMK_rtputflags = _WDMTMKv2.IOCTL_TMK_rtputflags
IOCTL_TMK_rtsetflag = _WDMTMKv2.IOCTL_TMK_rtsetflag
IOCTL_TMK_rtclrflag = _WDMTMKv2.IOCTL_TMK_rtclrflag
IOCTL_TMK_rtgetflag = _WDMTMKv2.IOCTL_TMK_rtgetflag
IOCTL_TMK_rtgetstate = _WDMTMKv2.IOCTL_TMK_rtgetstate
IOCTL_TMK_rtbusy = _WDMTMKv2.IOCTL_TMK_rtbusy
IOCTL_TMK_rtlock = _WDMTMKv2.IOCTL_TMK_rtlock
IOCTL_TMK_rtunlock = _WDMTMKv2.IOCTL_TMK_rtunlock
IOCTL_TMK_rtgetcmddata = _WDMTMKv2.IOCTL_TMK_rtgetcmddata
IOCTL_TMK_rtputcmddata = _WDMTMKv2.IOCTL_TMK_rtputcmddata
IOCTL_TMK_mtreset = _WDMTMKv2.IOCTL_TMK_mtreset
IOCTL_TMK_mtdefirqmode = _WDMTMKv2.IOCTL_TMK_mtdefirqmode
IOCTL_TMK_mtgetirqmode = _WDMTMKv2.IOCTL_TMK_mtgetirqmode
IOCTL_TMK_mtgetmaxbase = _WDMTMKv2.IOCTL_TMK_mtgetmaxbase
IOCTL_TMK_mtdefbase = _WDMTMKv2.IOCTL_TMK_mtdefbase
IOCTL_TMK_mtgetbase = _WDMTMKv2.IOCTL_TMK_mtgetbase
IOCTL_TMK_mtputw = _WDMTMKv2.IOCTL_TMK_mtputw
IOCTL_TMK_mtgetw = _WDMTMKv2.IOCTL_TMK_mtgetw
IOCTL_TMK_mtgetsw = _WDMTMKv2.IOCTL_TMK_mtgetsw
IOCTL_TMK_mtputblk = _WDMTMKv2.IOCTL_TMK_mtputblk
IOCTL_TMK_mtgetblk = _WDMTMKv2.IOCTL_TMK_mtgetblk
IOCTL_TMK_mtstartx = _WDMTMKv2.IOCTL_TMK_mtstartx
IOCTL_TMK_mtdeflink = _WDMTMKv2.IOCTL_TMK_mtdeflink
IOCTL_TMK_mtgetlink = _WDMTMKv2.IOCTL_TMK_mtgetlink
IOCTL_TMK_mtstop = _WDMTMKv2.IOCTL_TMK_mtstop
IOCTL_TMK_mtgetstate = _WDMTMKv2.IOCTL_TMK_mtgetstate
IOCTL_TMK_tmkgetinfo = _WDMTMKv2.IOCTL_TMK_tmkgetinfo
IOCTL_TMK_GetVersion = _WDMTMKv2.IOCTL_TMK_GetVersion
IOCTL_TMK_rtenable = _WDMTMKv2.IOCTL_TMK_rtenable
IOCTL_TMK_mrtgetmaxn = _WDMTMKv2.IOCTL_TMK_mrtgetmaxn
IOCTL_TMK_mrtconfig = _WDMTMKv2.IOCTL_TMK_mrtconfig
IOCTL_TMK_mrtselected = _WDMTMKv2.IOCTL_TMK_mrtselected
IOCTL_TMK_mrtgetstate = _WDMTMKv2.IOCTL_TMK_mrtgetstate
IOCTL_TMK_mrtdefbrcsubaddr0 = _WDMTMKv2.IOCTL_TMK_mrtdefbrcsubaddr0
IOCTL_TMK_mrtreset = _WDMTMKv2.IOCTL_TMK_mrtreset
IOCTL_TMK_tmktimer = _WDMTMKv2.IOCTL_TMK_tmktimer
IOCTL_TMK_tmkgettimer = _WDMTMKv2.IOCTL_TMK_tmkgettimer
IOCTL_TMK_tmkgettimerl = _WDMTMKv2.IOCTL_TMK_tmkgettimerl
IOCTL_TMK_bcgetmsgtime = _WDMTMKv2.IOCTL_TMK_bcgetmsgtime
IOCTL_TMK_mtgetmsgtime = _WDMTMKv2.IOCTL_TMK_mtgetmsgtime
IOCTL_TMK_rtgetmsgtime = _WDMTMKv2.IOCTL_TMK_rtgetmsgtime
IOCTL_TMK_tmkgethwver = _WDMTMKv2.IOCTL_TMK_tmkgethwver
IOCTL_TMK_tmkgetevtime = _WDMTMKv2.IOCTL_TMK_tmkgetevtime
IOCTL_TMK_tmkswtimer = _WDMTMKv2.IOCTL_TMK_tmkswtimer
IOCTL_TMK_tmkgetswtimer = _WDMTMKv2.IOCTL_TMK_tmkgetswtimer
IOCTL_TMK_tmktimeout = _WDMTMKv2.IOCTL_TMK_tmktimeout
IOCTL_TMK_mrtdefbrcpage = _WDMTMKv2.IOCTL_TMK_mrtdefbrcpage
IOCTL_TMK_mrtgetbrcpage = _WDMTMKv2.IOCTL_TMK_mrtgetbrcpage
IOCTL_TMK_mbcinit = _WDMTMKv2.IOCTL_TMK_mbcinit
IOCTL_TMK_mbcpreparex = _WDMTMKv2.IOCTL_TMK_mbcpreparex
IOCTL_TMK_mbcstartx = _WDMTMKv2.IOCTL_TMK_mbcstartx
IOCTL_TMK_mbcalloc = _WDMTMKv2.IOCTL_TMK_mbcalloc
IOCTL_TMK_mbcfree = _WDMTMKv2.IOCTL_TMK_mbcfree
Ezusb_IOCTL_INDEX = _WDMTMKv2.Ezusb_IOCTL_INDEX
FILE_DEVICE_UNKNOWN = _WDMTMKv2.FILE_DEVICE_UNKNOWN
IOCTL_EZUSB_GET_DRIVER_VERSION = _WDMTMKv2.IOCTL_EZUSB_GET_DRIVER_VERSION
IOCTL_EZUSB_SET_CURPROC = _WDMTMKv2.IOCTL_EZUSB_SET_CURPROC
class EZUSB_DRIVER_VERSION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EZUSB_DRIVER_VERSION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EZUSB_DRIVER_VERSION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MajorVersion"] = _WDMTMKv2.EZUSB_DRIVER_VERSION_MajorVersion_set
    __swig_getmethods__["MajorVersion"] = _WDMTMKv2.EZUSB_DRIVER_VERSION_MajorVersion_get
    if _newclass:
        MajorVersion = _swig_property(_WDMTMKv2.EZUSB_DRIVER_VERSION_MajorVersion_get, _WDMTMKv2.EZUSB_DRIVER_VERSION_MajorVersion_set)
    __swig_setmethods__["MinorVersion"] = _WDMTMKv2.EZUSB_DRIVER_VERSION_MinorVersion_set
    __swig_getmethods__["MinorVersion"] = _WDMTMKv2.EZUSB_DRIVER_VERSION_MinorVersion_get
    if _newclass:
        MinorVersion = _swig_property(_WDMTMKv2.EZUSB_DRIVER_VERSION_MinorVersion_get, _WDMTMKv2.EZUSB_DRIVER_VERSION_MinorVersion_set)
    __swig_setmethods__["BuildVersion"] = _WDMTMKv2.EZUSB_DRIVER_VERSION_BuildVersion_set
    __swig_getmethods__["BuildVersion"] = _WDMTMKv2.EZUSB_DRIVER_VERSION_BuildVersion_get
    if _newclass:
        BuildVersion = _swig_property(_WDMTMKv2.EZUSB_DRIVER_VERSION_BuildVersion_get, _WDMTMKv2.EZUSB_DRIVER_VERSION_BuildVersion_set)

    def __init__(self):
        this = _WDMTMKv2.new_EZUSB_DRIVER_VERSION()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_EZUSB_DRIVER_VERSION
    __del__ = lambda self: None
EZUSB_DRIVER_VERSION_swigregister = _WDMTMKv2.EZUSB_DRIVER_VERSION_swigregister
EZUSB_DRIVER_VERSION_swigregister(EZUSB_DRIVER_VERSION)

class TTmkConfigData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTmkConfigData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTmkConfigData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nType"] = _WDMTMKv2.TTmkConfigData_nType_set
    __swig_getmethods__["nType"] = _WDMTMKv2.TTmkConfigData_nType_get
    if _newclass:
        nType = _swig_property(_WDMTMKv2.TTmkConfigData_nType_get, _WDMTMKv2.TTmkConfigData_nType_set)
    __swig_setmethods__["szName"] = _WDMTMKv2.TTmkConfigData_szName_set
    __swig_getmethods__["szName"] = _WDMTMKv2.TTmkConfigData_szName_get
    if _newclass:
        szName = _swig_property(_WDMTMKv2.TTmkConfigData_szName_get, _WDMTMKv2.TTmkConfigData_szName_set)
    __swig_setmethods__["wPorts1"] = _WDMTMKv2.TTmkConfigData_wPorts1_set
    __swig_getmethods__["wPorts1"] = _WDMTMKv2.TTmkConfigData_wPorts1_get
    if _newclass:
        wPorts1 = _swig_property(_WDMTMKv2.TTmkConfigData_wPorts1_get, _WDMTMKv2.TTmkConfigData_wPorts1_set)
    __swig_setmethods__["wPorts2"] = _WDMTMKv2.TTmkConfigData_wPorts2_set
    __swig_getmethods__["wPorts2"] = _WDMTMKv2.TTmkConfigData_wPorts2_get
    if _newclass:
        wPorts2 = _swig_property(_WDMTMKv2.TTmkConfigData_wPorts2_get, _WDMTMKv2.TTmkConfigData_wPorts2_set)
    __swig_setmethods__["wIrq1"] = _WDMTMKv2.TTmkConfigData_wIrq1_set
    __swig_getmethods__["wIrq1"] = _WDMTMKv2.TTmkConfigData_wIrq1_get
    if _newclass:
        wIrq1 = _swig_property(_WDMTMKv2.TTmkConfigData_wIrq1_get, _WDMTMKv2.TTmkConfigData_wIrq1_set)
    __swig_setmethods__["wIrq2"] = _WDMTMKv2.TTmkConfigData_wIrq2_set
    __swig_getmethods__["wIrq2"] = _WDMTMKv2.TTmkConfigData_wIrq2_get
    if _newclass:
        wIrq2 = _swig_property(_WDMTMKv2.TTmkConfigData_wIrq2_get, _WDMTMKv2.TTmkConfigData_wIrq2_set)
    __swig_setmethods__["wIODelay"] = _WDMTMKv2.TTmkConfigData_wIODelay_set
    __swig_getmethods__["wIODelay"] = _WDMTMKv2.TTmkConfigData_wIODelay_get
    if _newclass:
        wIODelay = _swig_property(_WDMTMKv2.TTmkConfigData_wIODelay_get, _WDMTMKv2.TTmkConfigData_wIODelay_set)

    def __init__(self):
        this = _WDMTMKv2.new_TTmkConfigData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TTmkConfigData
    __del__ = lambda self: None
TTmkConfigData_swigregister = _WDMTMKv2.TTmkConfigData_swigregister
TTmkConfigData_swigregister(TTmkConfigData)

class TBc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TBc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TBc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wResult"] = _WDMTMKv2.TBc_wResult_set
    __swig_getmethods__["wResult"] = _WDMTMKv2.TBc_wResult_get
    if _newclass:
        wResult = _swig_property(_WDMTMKv2.TBc_wResult_get, _WDMTMKv2.TBc_wResult_set)
    __swig_setmethods__["wAW1"] = _WDMTMKv2.TBc_wAW1_set
    __swig_getmethods__["wAW1"] = _WDMTMKv2.TBc_wAW1_get
    if _newclass:
        wAW1 = _swig_property(_WDMTMKv2.TBc_wAW1_get, _WDMTMKv2.TBc_wAW1_set)
    __swig_setmethods__["wAW2"] = _WDMTMKv2.TBc_wAW2_set
    __swig_getmethods__["wAW2"] = _WDMTMKv2.TBc_wAW2_get
    if _newclass:
        wAW2 = _swig_property(_WDMTMKv2.TBc_wAW2_get, _WDMTMKv2.TBc_wAW2_set)

    def __init__(self):
        this = _WDMTMKv2.new_TBc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TBc
    __del__ = lambda self: None
TBc_swigregister = _WDMTMKv2.TBc_swigregister
TBc_swigregister(TBc)

class TBcx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TBcx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TBcx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wBase"] = _WDMTMKv2.TBcx_wBase_set
    __swig_getmethods__["wBase"] = _WDMTMKv2.TBcx_wBase_get
    if _newclass:
        wBase = _swig_property(_WDMTMKv2.TBcx_wBase_get, _WDMTMKv2.TBcx_wBase_set)
    __swig_setmethods__["wResultX"] = _WDMTMKv2.TBcx_wResultX_set
    __swig_getmethods__["wResultX"] = _WDMTMKv2.TBcx_wResultX_get
    if _newclass:
        wResultX = _swig_property(_WDMTMKv2.TBcx_wResultX_get, _WDMTMKv2.TBcx_wResultX_set)

    def __init__(self):
        this = _WDMTMKv2.new_TBcx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TBcx
    __del__ = lambda self: None
TBcx_swigregister = _WDMTMKv2.TBcx_swigregister
TBcx_swigregister(TBcx)

class TRt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wStatus"] = _WDMTMKv2.TRt_wStatus_set
    __swig_getmethods__["wStatus"] = _WDMTMKv2.TRt_wStatus_get
    if _newclass:
        wStatus = _swig_property(_WDMTMKv2.TRt_wStatus_get, _WDMTMKv2.TRt_wStatus_set)
    __swig_setmethods__["wCmd"] = _WDMTMKv2.TRt_wCmd_set
    __swig_getmethods__["wCmd"] = _WDMTMKv2.TRt_wCmd_get
    if _newclass:
        wCmd = _swig_property(_WDMTMKv2.TRt_wCmd_get, _WDMTMKv2.TRt_wCmd_set)

    def __init__(self):
        this = _WDMTMKv2.new_TRt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TRt
    __del__ = lambda self: None
TRt_swigregister = _WDMTMKv2.TRt_swigregister
TRt_swigregister(TRt)

class TMt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wBase"] = _WDMTMKv2.TMt_wBase_set
    __swig_getmethods__["wBase"] = _WDMTMKv2.TMt_wBase_get
    if _newclass:
        wBase = _swig_property(_WDMTMKv2.TMt_wBase_get, _WDMTMKv2.TMt_wBase_set)
    __swig_setmethods__["wResultX"] = _WDMTMKv2.TMt_wResultX_set
    __swig_getmethods__["wResultX"] = _WDMTMKv2.TMt_wResultX_get
    if _newclass:
        wResultX = _swig_property(_WDMTMKv2.TMt_wResultX_get, _WDMTMKv2.TMt_wResultX_set)

    def __init__(self):
        this = _WDMTMKv2.new_TMt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TMt
    __del__ = lambda self: None
TMt_swigregister = _WDMTMKv2.TMt_swigregister
TMt_swigregister(TMt)

class TMrt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TMrt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TMrt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wStatus"] = _WDMTMKv2.TMrt_wStatus_set
    __swig_getmethods__["wStatus"] = _WDMTMKv2.TMrt_wStatus_get
    if _newclass:
        wStatus = _swig_property(_WDMTMKv2.TMrt_wStatus_get, _WDMTMKv2.TMrt_wStatus_set)

    def __init__(self):
        this = _WDMTMKv2.new_TMrt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TMrt
    __del__ = lambda self: None
TMrt_swigregister = _WDMTMKv2.TMrt_swigregister
TMrt_swigregister(TMrt)

class TTmk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTmk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTmk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wRequest"] = _WDMTMKv2.TTmk_wRequest_set
    __swig_getmethods__["wRequest"] = _WDMTMKv2.TTmk_wRequest_get
    if _newclass:
        wRequest = _swig_property(_WDMTMKv2.TTmk_wRequest_get, _WDMTMKv2.TTmk_wRequest_set)

    def __init__(self):
        this = _WDMTMKv2.new_TTmk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TTmk
    __del__ = lambda self: None
TTmk_swigregister = _WDMTMKv2.TTmk_swigregister
TTmk_swigregister(TTmk)

class TRaw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRaw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRaw, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wData1"] = _WDMTMKv2.TRaw_wData1_set
    __swig_getmethods__["wData1"] = _WDMTMKv2.TRaw_wData1_get
    if _newclass:
        wData1 = _swig_property(_WDMTMKv2.TRaw_wData1_get, _WDMTMKv2.TRaw_wData1_set)
    __swig_setmethods__["wData2"] = _WDMTMKv2.TRaw_wData2_set
    __swig_getmethods__["wData2"] = _WDMTMKv2.TRaw_wData2_get
    if _newclass:
        wData2 = _swig_property(_WDMTMKv2.TRaw_wData2_get, _WDMTMKv2.TRaw_wData2_set)

    def __init__(self):
        this = _WDMTMKv2.new_TRaw()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TRaw
    __del__ = lambda self: None
TRaw_swigregister = _WDMTMKv2.TRaw_swigregister
TRaw_swigregister(TRaw)

class TSub(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSub, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSub, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bc"] = _WDMTMKv2.TSub_bc_set
    __swig_getmethods__["bc"] = _WDMTMKv2.TSub_bc_get
    if _newclass:
        bc = _swig_property(_WDMTMKv2.TSub_bc_get, _WDMTMKv2.TSub_bc_set)
    __swig_setmethods__["bcx"] = _WDMTMKv2.TSub_bcx_set
    __swig_getmethods__["bcx"] = _WDMTMKv2.TSub_bcx_get
    if _newclass:
        bcx = _swig_property(_WDMTMKv2.TSub_bcx_get, _WDMTMKv2.TSub_bcx_set)
    __swig_setmethods__["rt"] = _WDMTMKv2.TSub_rt_set
    __swig_getmethods__["rt"] = _WDMTMKv2.TSub_rt_get
    if _newclass:
        rt = _swig_property(_WDMTMKv2.TSub_rt_get, _WDMTMKv2.TSub_rt_set)
    __swig_setmethods__["mt"] = _WDMTMKv2.TSub_mt_set
    __swig_getmethods__["mt"] = _WDMTMKv2.TSub_mt_get
    if _newclass:
        mt = _swig_property(_WDMTMKv2.TSub_mt_get, _WDMTMKv2.TSub_mt_set)
    __swig_setmethods__["mrt"] = _WDMTMKv2.TSub_mrt_set
    __swig_getmethods__["mrt"] = _WDMTMKv2.TSub_mrt_get
    if _newclass:
        mrt = _swig_property(_WDMTMKv2.TSub_mrt_get, _WDMTMKv2.TSub_mrt_set)
    __swig_setmethods__["tmk"] = _WDMTMKv2.TSub_tmk_set
    __swig_getmethods__["tmk"] = _WDMTMKv2.TSub_tmk_get
    if _newclass:
        tmk = _swig_property(_WDMTMKv2.TSub_tmk_get, _WDMTMKv2.TSub_tmk_set)
    __swig_setmethods__["raw"] = _WDMTMKv2.TSub_raw_set
    __swig_getmethods__["raw"] = _WDMTMKv2.TSub_raw_get
    if _newclass:
        raw = _swig_property(_WDMTMKv2.TSub_raw_get, _WDMTMKv2.TSub_raw_set)

    def __init__(self):
        this = _WDMTMKv2.new_TSub()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TSub
    __del__ = lambda self: None
TSub_swigregister = _WDMTMKv2.TSub_swigregister
TSub_swigregister(TSub)

class TTmkEventData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTmkEventData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TTmkEventData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nInt"] = _WDMTMKv2.TTmkEventData_nInt_set
    __swig_getmethods__["nInt"] = _WDMTMKv2.TTmkEventData_nInt_get
    if _newclass:
        nInt = _swig_property(_WDMTMKv2.TTmkEventData_nInt_get, _WDMTMKv2.TTmkEventData_nInt_set)
    __swig_setmethods__["wMode"] = _WDMTMKv2.TTmkEventData_wMode_set
    __swig_getmethods__["wMode"] = _WDMTMKv2.TTmkEventData_wMode_get
    if _newclass:
        wMode = _swig_property(_WDMTMKv2.TTmkEventData_wMode_get, _WDMTMKv2.TTmkEventData_wMode_set)
    __swig_setmethods__["sub"] = _WDMTMKv2.TTmkEventData_sub_set
    __swig_getmethods__["sub"] = _WDMTMKv2.TTmkEventData_sub_get
    if _newclass:
        sub = _swig_property(_WDMTMKv2.TTmkEventData_sub_get, _WDMTMKv2.TTmkEventData_sub_set)

    def __init__(self):
        this = _WDMTMKv2.new_TTmkEventData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WDMTMKv2.delete_TTmkEventData
    __del__ = lambda self: None
TTmkEventData_swigregister = _WDMTMKv2.TTmkEventData_swigregister
TTmkEventData_swigregister(TTmkEventData)


def TmkOpen() -> "DWORD":
    return _WDMTMKv2.TmkOpen()
TmkOpen = _WDMTMKv2.TmkOpen

def TmkClose() -> "void":
    return _WDMTMKv2.TmkClose()
TmkClose = _WDMTMKv2.TmkClose

def tmkgetinfo(pConfD: 'TTmkConfigData') -> "void":
    return _WDMTMKv2.tmkgetinfo(pConfD)
tmkgetinfo = _WDMTMKv2.tmkgetinfo

def tmkgetevd(pEvD: 'TTmkEventData') -> "void":
    return _WDMTMKv2.tmkgetevd(pEvD)
tmkgetevd = _WDMTMKv2.tmkgetevd

def tmkdefevent(hEvent: 'HANDLE', fEventSet: 'BOOL') -> "void":
    return _WDMTMKv2.tmkdefevent(hEvent, fEventSet)
tmkdefevent = _WDMTMKv2.tmkdefevent

def tmkgetmaxn() -> "int":
    return _WDMTMKv2.tmkgetmaxn()
tmkgetmaxn = _WDMTMKv2.tmkgetmaxn

def tmkconfig(tmkNumber: 'int') -> "int":
    return _WDMTMKv2.tmkconfig(tmkNumber)
tmkconfig = _WDMTMKv2.tmkconfig

def tmkdone(tmkNumber: 'int') -> "int":
    return _WDMTMKv2.tmkdone(tmkNumber)
tmkdone = _WDMTMKv2.tmkdone

def tmkselect(tmkNumber: 'int') -> "int":
    return _WDMTMKv2.tmkselect(tmkNumber)
tmkselect = _WDMTMKv2.tmkselect

def tmkselected() -> "int":
    return _WDMTMKv2.tmkselected()
tmkselected = _WDMTMKv2.tmkselected

def tmkgetmode() -> "unsigned short":
    return _WDMTMKv2.tmkgetmode()
tmkgetmode = _WDMTMKv2.tmkgetmode

def tmkdefdac(dacValue: 'int') -> "int":
    return _WDMTMKv2.tmkdefdac(dacValue)
tmkdefdac = _WDMTMKv2.tmkdefdac

def tmkgetdac(dacValue: 'int *', dacMode: 'int *') -> "int":
    return _WDMTMKv2.tmkgetdac(dacValue, dacMode)
tmkgetdac = _WDMTMKv2.tmkgetdac

def tmksetcwbits(tmkSetControl: 'unsigned short') -> "void":
    return _WDMTMKv2.tmksetcwbits(tmkSetControl)
tmksetcwbits = _WDMTMKv2.tmksetcwbits

def tmkclrcwbits(tmkClrControl: 'unsigned short') -> "void":
    return _WDMTMKv2.tmkclrcwbits(tmkClrControl)
tmkclrcwbits = _WDMTMKv2.tmkclrcwbits

def tmkgetcwbits() -> "unsigned short":
    return _WDMTMKv2.tmkgetcwbits()
tmkgetcwbits = _WDMTMKv2.tmkgetcwbits

def bcreset() -> "int":
    return _WDMTMKv2.bcreset()
bcreset = _WDMTMKv2.bcreset

def bc_def_tldw(wTLDW: 'unsigned short') -> "void":
    return _WDMTMKv2.bc_def_tldw(wTLDW)
bc_def_tldw = _WDMTMKv2.bc_def_tldw

def bc_enable_di() -> "void":
    return _WDMTMKv2.bc_enable_di()
bc_enable_di = _WDMTMKv2.bc_enable_di

def bc_disable_di() -> "void":
    return _WDMTMKv2.bc_disable_di()
bc_disable_di = _WDMTMKv2.bc_disable_di

def bcdefirqmode(bcIrqMode: 'unsigned short') -> "int":
    return _WDMTMKv2.bcdefirqmode(bcIrqMode)
bcdefirqmode = _WDMTMKv2.bcdefirqmode

def bcgetirqmode() -> "unsigned short":
    return _WDMTMKv2.bcgetirqmode()
bcgetirqmode = _WDMTMKv2.bcgetirqmode

def bcgetmaxbase() -> "unsigned short":
    return _WDMTMKv2.bcgetmaxbase()
bcgetmaxbase = _WDMTMKv2.bcgetmaxbase

def bcdefbase(bcBasePC: 'unsigned short') -> "int":
    return _WDMTMKv2.bcdefbase(bcBasePC)
bcdefbase = _WDMTMKv2.bcdefbase

def bcgetbase() -> "unsigned short":
    return _WDMTMKv2.bcgetbase()
bcgetbase = _WDMTMKv2.bcgetbase

def bcputw(bcAddr: 'unsigned short', bcData: 'unsigned short') -> "void":
    return _WDMTMKv2.bcputw(bcAddr, bcData)
bcputw = _WDMTMKv2.bcputw

def bcgetw(bcAddr: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.bcgetw(bcAddr)
bcgetw = _WDMTMKv2.bcgetw

def bcgetansw(bcCtrlCode: 'unsigned short') -> "DWORD":
    return _WDMTMKv2.bcgetansw(bcCtrlCode)
bcgetansw = _WDMTMKv2.bcgetansw

def bcputblk(bcAddr: 'unsigned short', pcBuffer: 'void *', cwLength: 'unsigned short') -> "void":
    return _WDMTMKv2.bcputblk(bcAddr, pcBuffer, cwLength)
bcputblk = _WDMTMKv2.bcputblk

def bcgetblk(bcAddr: 'unsigned short', pcBuffer: 'void *', cwLength: 'unsigned short') -> "void":
    return _WDMTMKv2.bcgetblk(bcAddr, pcBuffer, cwLength)
bcgetblk = _WDMTMKv2.bcgetblk

def bcdefbus(bcBus: 'unsigned short') -> "int":
    return _WDMTMKv2.bcdefbus(bcBus)
bcdefbus = _WDMTMKv2.bcdefbus

def bcgetbus() -> "unsigned short":
    return _WDMTMKv2.bcgetbus()
bcgetbus = _WDMTMKv2.bcgetbus

def bcstart(bcBase: 'unsigned short', bcCtrlCode: 'unsigned short') -> "int":
    return _WDMTMKv2.bcstart(bcBase, bcCtrlCode)
bcstart = _WDMTMKv2.bcstart

def bcstartx(bcBase: 'unsigned short', bcCtrlCode: 'unsigned short') -> "int":
    return _WDMTMKv2.bcstartx(bcBase, bcCtrlCode)
bcstartx = _WDMTMKv2.bcstartx

def bcdeflink(bcBase: 'unsigned short', bcCtrlCode: 'unsigned short') -> "int":
    return _WDMTMKv2.bcdeflink(bcBase, bcCtrlCode)
bcdeflink = _WDMTMKv2.bcdeflink

def bcgetlink() -> "DWORD":
    return _WDMTMKv2.bcgetlink()
bcgetlink = _WDMTMKv2.bcgetlink

def bcstop() -> "unsigned short":
    return _WDMTMKv2.bcstop()
bcstop = _WDMTMKv2.bcstop

def bcgetstate() -> "DWORD":
    return _WDMTMKv2.bcgetstate()
bcgetstate = _WDMTMKv2.bcgetstate

def rtreset() -> "int":
    return _WDMTMKv2.rtreset()
rtreset = _WDMTMKv2.rtreset

def rtdefirqmode(rtIrqMode: 'unsigned short') -> "int":
    return _WDMTMKv2.rtdefirqmode(rtIrqMode)
rtdefirqmode = _WDMTMKv2.rtdefirqmode

def rtgetirqmode() -> "unsigned short":
    return _WDMTMKv2.rtgetirqmode()
rtgetirqmode = _WDMTMKv2.rtgetirqmode

def rtdefmode(rtMode: 'unsigned short') -> "int":
    return _WDMTMKv2.rtdefmode(rtMode)
rtdefmode = _WDMTMKv2.rtdefmode

def rtgetmode() -> "unsigned short":
    return _WDMTMKv2.rtgetmode()
rtgetmode = _WDMTMKv2.rtgetmode

def rtgetmaxpage() -> "unsigned short":
    return _WDMTMKv2.rtgetmaxpage()
rtgetmaxpage = _WDMTMKv2.rtgetmaxpage

def rtdefpage(rtPage: 'unsigned short') -> "int":
    return _WDMTMKv2.rtdefpage(rtPage)
rtdefpage = _WDMTMKv2.rtdefpage

def rtgetpage() -> "unsigned short":
    return _WDMTMKv2.rtgetpage()
rtgetpage = _WDMTMKv2.rtgetpage

def rtdefpagepc(rtPagePC: 'unsigned short') -> "int":
    return _WDMTMKv2.rtdefpagepc(rtPagePC)
rtdefpagepc = _WDMTMKv2.rtdefpagepc

def rtdefpagebus(rtPageBus: 'unsigned short') -> "int":
    return _WDMTMKv2.rtdefpagebus(rtPageBus)
rtdefpagebus = _WDMTMKv2.rtdefpagebus

def rtgetpagepc() -> "unsigned short":
    return _WDMTMKv2.rtgetpagepc()
rtgetpagepc = _WDMTMKv2.rtgetpagepc

def rtgetpagebus() -> "unsigned short":
    return _WDMTMKv2.rtgetpagebus()
rtgetpagebus = _WDMTMKv2.rtgetpagebus

def rtdefaddress(rtAddress: 'unsigned short') -> "int":
    return _WDMTMKv2.rtdefaddress(rtAddress)
rtdefaddress = _WDMTMKv2.rtdefaddress

def rtgetaddress() -> "unsigned short":
    return _WDMTMKv2.rtgetaddress()
rtgetaddress = _WDMTMKv2.rtgetaddress

def rtdefsubaddr(rtDir: 'unsigned short', rtSubAddr: 'unsigned short') -> "void":
    return _WDMTMKv2.rtdefsubaddr(rtDir, rtSubAddr)
rtdefsubaddr = _WDMTMKv2.rtdefsubaddr

def rtgetsubaddr() -> "unsigned short":
    return _WDMTMKv2.rtgetsubaddr()
rtgetsubaddr = _WDMTMKv2.rtgetsubaddr

def rtputw(rtAddr: 'unsigned short', rtData: 'unsigned short') -> "void":
    return _WDMTMKv2.rtputw(rtAddr, rtData)
rtputw = _WDMTMKv2.rtputw

def rtgetw(rtAddr: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.rtgetw(rtAddr)
rtgetw = _WDMTMKv2.rtgetw

def rtputblk(rtAddr: 'unsigned short', pcBuffer: 'void *', cwLength: 'unsigned short') -> "void":
    return _WDMTMKv2.rtputblk(rtAddr, pcBuffer, cwLength)
rtputblk = _WDMTMKv2.rtputblk

def rtgetblk(rtAddr: 'unsigned short', pcBuffer: 'void *', cwLength: 'unsigned short') -> "void":
    return _WDMTMKv2.rtgetblk(rtAddr, pcBuffer, cwLength)
rtgetblk = _WDMTMKv2.rtgetblk

def rtsetanswbits(rtSetControl: 'unsigned short') -> "void":
    return _WDMTMKv2.rtsetanswbits(rtSetControl)
rtsetanswbits = _WDMTMKv2.rtsetanswbits

def rtclranswbits(rtClrControl: 'unsigned short') -> "void":
    return _WDMTMKv2.rtclranswbits(rtClrControl)
rtclranswbits = _WDMTMKv2.rtclranswbits

def rtgetanswbits() -> "unsigned short":
    return _WDMTMKv2.rtgetanswbits()
rtgetanswbits = _WDMTMKv2.rtgetanswbits

def rtgetflags(pcBuffer: 'void *', rtDir: 'unsigned short', rtFlagMin: 'unsigned short', rtFlagMax: 'unsigned short') -> "void":
    return _WDMTMKv2.rtgetflags(pcBuffer, rtDir, rtFlagMin, rtFlagMax)
rtgetflags = _WDMTMKv2.rtgetflags

def rtputflags(pcBuffer: 'void *', rtDir: 'unsigned short', rtFlagMin: 'unsigned short', rtFlagMax: 'unsigned short') -> "void":
    return _WDMTMKv2.rtputflags(pcBuffer, rtDir, rtFlagMin, rtFlagMax)
rtputflags = _WDMTMKv2.rtputflags

def rtsetflag() -> "void":
    return _WDMTMKv2.rtsetflag()
rtsetflag = _WDMTMKv2.rtsetflag

def rtclrflag() -> "void":
    return _WDMTMKv2.rtclrflag()
rtclrflag = _WDMTMKv2.rtclrflag

def rtgetflag(rtDir: 'unsigned short', rtSubAddr: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.rtgetflag(rtDir, rtSubAddr)
rtgetflag = _WDMTMKv2.rtgetflag

def rtgetstate() -> "unsigned short":
    return _WDMTMKv2.rtgetstate()
rtgetstate = _WDMTMKv2.rtgetstate

def rtbusy() -> "unsigned short":
    return _WDMTMKv2.rtbusy()
rtbusy = _WDMTMKv2.rtbusy

def rtlock(rtDir: 'unsigned short', rtSubAddr: 'unsigned short') -> "void":
    return _WDMTMKv2.rtlock(rtDir, rtSubAddr)
rtlock = _WDMTMKv2.rtlock

def rtunlock() -> "void":
    return _WDMTMKv2.rtunlock()
rtunlock = _WDMTMKv2.rtunlock

def rtgetcmddata(rtBusCommand: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.rtgetcmddata(rtBusCommand)
rtgetcmddata = _WDMTMKv2.rtgetcmddata

def rtputcmddata(rtBusCommand: 'unsigned short', rtData: 'unsigned short') -> "void":
    return _WDMTMKv2.rtputcmddata(rtBusCommand, rtData)
rtputcmddata = _WDMTMKv2.rtputcmddata

def mtreset() -> "int":
    return _WDMTMKv2.mtreset()
mtreset = _WDMTMKv2.mtreset

def mtgetsw() -> "unsigned short":
    return _WDMTMKv2.mtgetsw()
mtgetsw = _WDMTMKv2.mtgetsw

def rtenable(rtEnable: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.rtenable(rtEnable)
rtenable = _WDMTMKv2.rtenable

def mrtgetmaxn() -> "int":
    return _WDMTMKv2.mrtgetmaxn()
mrtgetmaxn = _WDMTMKv2.mrtgetmaxn

def mrtconfig(tmkNumber: 'int') -> "DWORD":
    return _WDMTMKv2.mrtconfig(tmkNumber)
mrtconfig = _WDMTMKv2.mrtconfig

def mrtselected() -> "int":
    return _WDMTMKv2.mrtselected()
mrtselected = _WDMTMKv2.mrtselected

def mrtgetstate() -> "unsigned short":
    return _WDMTMKv2.mrtgetstate()
mrtgetstate = _WDMTMKv2.mrtgetstate

def mrtdefbrcsubaddr0() -> "void":
    return _WDMTMKv2.mrtdefbrcsubaddr0()
mrtdefbrcsubaddr0 = _WDMTMKv2.mrtdefbrcsubaddr0

def mrtreset() -> "int":
    return _WDMTMKv2.mrtreset()
mrtreset = _WDMTMKv2.mrtreset

def tmktimer(tmkTimerCtrl: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.tmktimer(tmkTimerCtrl)
tmktimer = _WDMTMKv2.tmktimer

def tmkgettimer() -> "DWORD":
    return _WDMTMKv2.tmkgettimer()
tmkgettimer = _WDMTMKv2.tmkgettimer

def tmkgettimerl() -> "unsigned short":
    return _WDMTMKv2.tmkgettimerl()
tmkgettimerl = _WDMTMKv2.tmkgettimerl

def bcgetmsgtime() -> "DWORD":
    return _WDMTMKv2.bcgetmsgtime()
bcgetmsgtime = _WDMTMKv2.bcgetmsgtime

def rtgetmsgtime() -> "DWORD":
    return _WDMTMKv2.rtgetmsgtime()
rtgetmsgtime = _WDMTMKv2.rtgetmsgtime

def tmkgethwver() -> "unsigned short":
    return _WDMTMKv2.tmkgethwver()
tmkgethwver = _WDMTMKv2.tmkgethwver

def tmkgetevtime() -> "DWORD":
    return _WDMTMKv2.tmkgetevtime()
tmkgetevtime = _WDMTMKv2.tmkgetevtime

def tmkswtimer(tmkTimerCtrl: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.tmkswtimer(tmkTimerCtrl)
tmkswtimer = _WDMTMKv2.tmkswtimer

def tmkgetswtimer() -> "DWORD":
    return _WDMTMKv2.tmkgetswtimer()
tmkgetswtimer = _WDMTMKv2.tmkgetswtimer

def tmktimeout(tmkTimeOut: 'unsigned short') -> "unsigned short":
    return _WDMTMKv2.tmktimeout(tmkTimeOut)
tmktimeout = _WDMTMKv2.tmktimeout

def mrtdefbrcpage(mrtBrcPage: 'unsigned short') -> "int":
    return _WDMTMKv2.mrtdefbrcpage(mrtBrcPage)
mrtdefbrcpage = _WDMTMKv2.mrtdefbrcpage

def mrtgetbrcpage() -> "unsigned short":
    return _WDMTMKv2.mrtgetbrcpage()
mrtgetbrcpage = _WDMTMKv2.mrtgetbrcpage

def mbcinit(mbcId: 'unsigned short') -> "int":
    return _WDMTMKv2.mbcinit(mbcId)
mbcinit = _WDMTMKv2.mbcinit

def mbcpreparex(mbcId: 'unsigned short', bcBase: 'unsigned short', bcCtrlCode: 'unsigned short', mbcDelay: 'unsigned short') -> "int":
    return _WDMTMKv2.mbcpreparex(mbcId, bcBase, bcCtrlCode, mbcDelay)
mbcpreparex = _WDMTMKv2.mbcpreparex

def mbcstartx(mbcId: 'unsigned short') -> "int":
    return _WDMTMKv2.mbcstartx(mbcId)
mbcstartx = _WDMTMKv2.mbcstartx

def mbcalloc() -> "unsigned short":
    return _WDMTMKv2.mbcalloc()
mbcalloc = _WDMTMKv2.mbcalloc

def mbcfree(mbcId: 'unsigned short') -> "int":
    return _WDMTMKv2.mbcfree(mbcId)
mbcfree = _WDMTMKv2.mbcfree

def MT_Start(dwBufSize: 'DWORD', hEvent: 'HANDLE') -> "DWORD":
    return _WDMTMKv2.MT_Start(dwBufSize, hEvent)
MT_Start = _WDMTMKv2.MT_Start

def MT_GetMessage(Data: 'WORD *', dwBufSize: 'DWORD', FillFlag: 'int', dwMsWritten: 'DWORD *') -> "DWORD":
    return _WDMTMKv2.MT_GetMessage(Data, dwBufSize, FillFlag, dwMsWritten)
MT_GetMessage = _WDMTMKv2.MT_GetMessage

def MT_Stop() -> "DWORD":
    return _WDMTMKv2.MT_Stop()
MT_Stop = _WDMTMKv2.MT_Stop

def tmkrawio(buf_out: 'unsigned int *', buf_in: 'unsigned int *') -> "unsigned int":
    return _WDMTMKv2.tmkrawio(buf_out, buf_in)
tmkrawio = _WDMTMKv2.tmkrawio
# This file is compatible with both classic and new-style classes.


